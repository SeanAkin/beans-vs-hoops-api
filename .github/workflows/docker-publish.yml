name: pipeline
on:
 push:
   branches:
     - "main"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/hoops-vs-beans-api:latest

permissions:
  packages: write

jobs:
  # run-tests:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       dotnet-version: [ '8.0.x' ]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup dotnet ${{ matrix.dotnet-version }}
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: ${{ matrix.dotnet-version }}

  #     - name: Display dotnet version
  #       run: dotnet --version

  #     - name: Install dependencies
  #       run: dotnet restore

  #     - name: Build
  #       run: dotnet build

  #     - name: Test with the dotnet CLI
  #       run: dotnet test

  publish:
    name: publish image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: login
        run: |
          echo ${{ secrets.GH_SECRET }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Publish
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  
  deploy:
    needs: publish
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: create .env file on remote host
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cat > ${{ secrets.WORK_DIR }}/.env <<EOF
          API_KEY=${{ secrets.API_KEY }}
          WHITELISTED_IPS=${{ secrets.WHITELISTED_IPS }}
          EOF"
      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker compose pull && docker stop hoops-vs-beans_api || true && docker rm hoops-vs-beans_api || true && docker compose up -d && exit"
      - name: cleanup
        run: rm -rf ~/.ssh